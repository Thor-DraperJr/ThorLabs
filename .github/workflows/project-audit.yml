name: üîç Project Audit & Maintenance

on:
  schedule:
    # Run every Sunday at 6 AM UTC (good time for weekly review)
    - cron: '0 6 * * 0'
  workflow_dispatch:
    inputs:
      audit_mode:
        description: 'Audit mode'
        required: true
        default: 'report-only'
        type: choice
        options:
        - report-only
        - auto-fix
      create_issue:
        description: 'Create GitHub issue if problems found'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  audit:
    runs-on: ubuntu-latest
    name: Project Health Audit
    
    outputs:
      issues-found: ${{ steps.audit.outputs.issues-found }}
      critical-issues: ${{ steps.audit.outputs.critical-issues }}
      report-path: ${{ steps.audit.outputs.report-path }}
    
    steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for git analysis
    
    - name: üîß Setup dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc
        
        # Install Azure CLI for Bicep validation
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az bicep install
    
    - name: üîç Run project audit
      id: audit
      run: |
        # Determine audit mode
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          MODE="${{ inputs.audit_mode }}"
        else
          MODE="report-only"
        fi
        
        echo "Running audit in ${MODE} mode..."
        
        # Run the audit script
        if [[ "$MODE" == "auto-fix" ]]; then
          ./scripts/audit-project.sh --fix-issues || AUDIT_EXIT_CODE=$?
        else
          ./scripts/audit-project.sh --report-only || AUDIT_EXIT_CODE=$?
        fi
        
        # Capture results
        AUDIT_EXIT_CODE=${AUDIT_EXIT_CODE:-0}
        REPORT_FILE=$(ls audit-report-*.md | head -1)
        
        # Extract statistics from report
        TOTAL_ISSUES=$(grep -E "Total Issues.*:" "$REPORT_FILE" | grep -o '[0-9]\+' || echo "0")
        CRITICAL_ISSUES=$(grep -E "Critical Issues.*:" "$REPORT_FILE" | grep -o '[0-9]\+' || echo "0")
        
        echo "issues-found=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        echo "critical-issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
        echo "report-path=$REPORT_FILE" >> $GITHUB_OUTPUT
        echo "audit-exit-code=$AUDIT_EXIT_CODE" >> $GITHUB_OUTPUT
        
        # Set workflow status based on findings
        if [[ $CRITICAL_ISSUES -gt 0 ]]; then
          echo "‚ùå Critical issues found!"
          exit 1
        elif [[ $TOTAL_ISSUES -gt 0 ]]; then
          echo "‚ö†Ô∏è Some issues found, but not critical"
          exit 0
        else
          echo "‚úÖ No issues found!"
          exit 0
        fi
    
    - name: üìÑ Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: project-audit-report
        path: audit-report-*.md
        retention-days: 30
    
    - name: üíæ Commit auto-fixes
      if: github.event.inputs.audit_mode == 'auto-fix' && steps.audit.outputs.audit-exit-code != '1'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [[ -n "$(git status --porcelain)" ]]; then
          git add .
          git commit -m "üîß Auto-fix: Project maintenance fixes
          
          - Applied automatic fixes from project audit
          - Fixed file permissions and minor issues
          - Report: ${{ steps.audit.outputs.report-path }}
          
          Co-authored-by: Project Audit Bot <noreply@github.com>"
          git push
        else
          echo "No changes to commit"
        fi

  create-issue:
    needs: audit
    runs-on: ubuntu-latest
    if: |
      always() && 
      (needs.audit.outputs.issues-found > 0) &&
      (github.event_name == 'schedule' || github.event.inputs.create_issue == 'true')
    
    steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
    
    - name: üì• Download audit report
      uses: actions/download-artifact@v4
      with:
        name: project-audit-report
    
    - name: üìù Create or update issue
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read the audit report
          const reportFiles = fs.readdirSync('.').filter(f => f.startsWith('audit-report-'));
          const reportFile = reportFiles[0];
          const reportContent = fs.readFileSync(reportFile, 'utf8');
          
          const issuesFound = ${{ needs.audit.outputs.issues-found }};
          const criticalIssues = ${{ needs.audit.outputs.critical-issues }};
          
          // Determine severity emoji and label
          const severity = criticalIssues > 0 ? 'critical' : issuesFound > 5 ? 'high' : 'medium';
          const emoji = criticalIssues > 0 ? 'üö®' : issuesFound > 5 ? '‚ö†Ô∏è' : 'üí°';
          const label = criticalIssues > 0 ? 'critical' : 'maintenance';
          
          const title = `${emoji} Project Audit: ${issuesFound} issues found (${criticalIssues} critical)`;
          
          const body = `## Project Audit Report
          
          **Date:** ${new Date().toISOString().split('T')[0]}
          **Issues Found:** ${issuesFound}
          **Critical Issues:** ${criticalIssues}
          **Severity:** ${severity.toUpperCase()}
          
          ### üéØ Quick Actions
          ${ criticalIssues > 0 ? '- ‚ùó **Review critical issues immediately**' : ''}
          - üìä Review full report in workflow artifacts
          - üîß Run \`./scripts/audit-project.sh --fix-issues\` for auto-fixes
          - üìù Update project maintenance policies if needed
          
          ### üìã Summary
          \`\`\`
          ${reportContent.split('## Summary Statistics')[1]?.split('## Next Steps')[0]?.trim() || 'See full report for details'}
          \`\`\`
          
          ### üîó Links
          - [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Download Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *This issue was automatically created by the Project Audit workflow. It will be closed when issues are resolved.*
          `;
          
          // Check for existing open audit issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'project-audit',
            state: 'open'
          });
          
          if (issues.length > 0) {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              title: title,
              body: body,
              labels: ['project-audit', label, 'automated']
            });
            console.log(`Updated issue #${issues[0].number}`);
          } else {
            // Create new issue
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['project-audit', label, 'automated']
            });
            console.log(`Created issue #${issue.number}`);
          }

  close-resolved-issues:
    needs: audit
    runs-on: ubuntu-latest
    if: always() && needs.audit.outputs.issues-found == 0
    
    steps:
    - name: üéâ Close resolved audit issues
      uses: actions/github-script@v7
      with:
        script: |
          // Find open project-audit issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'project-audit',
            state: 'open'
          });
          
          for (const issue of issues) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: '‚úÖ **All issues resolved!** \n\nThe latest project audit found no issues. This issue is being automatically closed.'
            });
            
            console.log(`Closed resolved issue #${issue.number}`);
          }
