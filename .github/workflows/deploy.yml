# GitHub Actions workflow for automated deployment of ThorLabs lab environment
# Deploys unified Bicep template with Ubuntu and Windows Server VMs plus shared networking
# Triggered on push to main branch or manual dispatch with optional clean redeployment
name: Deploy Azure Lab Environment

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering
    inputs:
      delete_before_deploy:
        description: 'Delete resource group before deployment (for clean redeployment)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription "$AZURE_SUBSCRIPTION_ID"

      - name: Delete Resource Group (if requested)
        if: ${{ github.event.inputs.delete_before_deploy == 'true' }}
        run: |
          echo "Deleting resource group thorlabs-rg for clean redeployment..."
          az group delete --name thorlabs-rg --yes --no-wait || echo "Resource group does not exist or already deleted"
          echo "Waiting for resource group deletion to complete..."
          while az group show --name thorlabs-rg --output none 2>/dev/null; do
            echo "Waiting for resource group deletion..."
            sleep 30
          done
          echo "Resource group deletion completed"

      - name: Create Resource Group
        run: |
          echo "Ensuring resource group thorlabs-rg exists..."
          az group create --name thorlabs-rg --location eastus2

      - name: Validate Bicep Template
        run: |
          echo "Validating unified lab template..."
          az deployment group validate \
            --resource-group thorlabs-rg \
            --template-file infra/lab.bicep \
            --parameters adminPassword="$ADMIN_PASSWORD" \
            --parameters @infra/lab.parameters.json \
            --debug

      - name: Deploy Lab Environment
        run: |
          echo "Deploying unified lab environment (Ubuntu + Windows VMs)..."
          DEPLOYMENT_NAME="thorlabs-lab-deployment-$(date +%Y%m%d-%H%M%S)"
          echo "Deployment name: $DEPLOYMENT_NAME"
          
          # Create deployment log file
          DEPLOYMENT_LOG="/tmp/deployment-${DEPLOYMENT_NAME}.log"
          
          # Run deployment with debug output and capture logs
          set +e  # Don't exit on error so we can capture logs
          az deployment group create \
            --name "$DEPLOYMENT_NAME" \
            --resource-group thorlabs-rg \
            --template-file infra/lab.bicep \
            --parameters adminPassword="$ADMIN_PASSWORD" \
            --parameters @infra/lab.parameters.json \
            --verbose \
            --debug > "$DEPLOYMENT_LOG" 2>&1
          
          DEPLOYMENT_RESULT=$?
          set -e  # Re-enable exit on error
          
          echo "=== DEPLOYMENT LOG SUMMARY ==="
          if [ $DEPLOYMENT_RESULT -eq 0 ]; then
            echo "✅ Deployment completed successfully"
            echo "Last 20 lines of deployment log:"
            tail -20 "$DEPLOYMENT_LOG"
          else
            echo "❌ Deployment failed with exit code: $DEPLOYMENT_RESULT"
            echo "=== ERROR DETAILS ==="
            echo "Last 50 lines of deployment log:"
            tail -50 "$DEPLOYMENT_LOG"
            echo "=== FULL DEPLOYMENT LOG ==="
            cat "$DEPLOYMENT_LOG"
            exit $DEPLOYMENT_RESULT
          fi

      - name: Deploy Azure Policies
        run: |
          echo "Deploying Azure Policy definitions..."
          for policy in policies/*.bicep; do
            if [ -f "$policy" ]; then
              echo "Deploying policy: $policy"
              az deployment sub create \
                --location eastus2 \
                --template-file "$policy" \
                --verbose \
                --debug
            fi
          done

      - name: Output Deployment Summary
        run: |
          echo "=== ThorLabs Lab Environment Deployment Complete ==="
          echo "Resources deployed:"
          echo "  - Ubuntu Server VM (thorlabs-vm1-eastus2) in shared network"
          echo "  - Windows Server 2022 VM (thorlabs-vm2-eastus2) in shared network"
          echo "  - Shared VNet (10.10.0.0/16) with subnet (10.10.0.0/24)"
          echo "  - Shared NSG with SSH (22) and RDP (3389) access rules"
          echo "  - Azure Policy definitions for governance"
          echo ""
          echo "Next steps:"
          echo "  1. Connect to Ubuntu server via SSH for lab workloads"
          echo "  2. Connect to Windows server via RDP for additional configuration"
          echo "  3. Review deployed resources in Azure portal"
          echo "  4. Verify auto-shutdown policies are applied for cost control"